#!/usr/bin/env python3

from dynamic_reconfigure.parameter_generator_catkin import (
    ParameterGenerator,
    double_t,
    bool_t,
)

gen = ParameterGenerator()

gen.add(
    'goal_time', double_t, 0,
    "Amount of time (s) controller is permitted to be late achieving goal",
    0.1, 0.0, 120.0,
)

gen.add(
    'stopped_velocity_tolerance', double_t, 0,
    "Maximum velocity (m/s) at end of trajectory to be considered stopped",
    0.25, -1.0, 1.0,
)

joints = (
    'left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1',
    'left_w2', 'right_s0', 'right_s1', 'right_e0', 'right_e1', 'right_w0',
    'right_w1', 'right_w2',
    )

params = ('_goal', '_trajectory',)
msg = (
    " - maximum final error",
    " - maximum error during trajectory execution",
    )

min = (-1.0, -1.0,)
default = (-1.0, 0.2,)
max = (1.0, 1.0,)

for idx, param in enumerate(params):
    for joint in joints:
        gen.add(
            joint + param, double_t, 0, joint + msg[idx],
            default[idx], min[idx], max[idx]
        )

#stiffness
gen.add("stiffness", bool_t, 0, "Stiffness parameter for Cartesian Impedance Control", True)

group_translation_s = gen.add_group("Set translational stiffness", type="hidden")
group_rotation_s = gen.add_group("Set rotational stiffness", type="hidden")
group_nullspace_s = gen.add_group("Set nullspace stiffness", type="hidden")
group_apply_s = gen.add_group("Update the stiffness", type="hidden")

group_translation_s.add("translation_x_s", double_t, 0, "translational stiffness", 200, 0, 2000)
group_translation_s.add("translation_y_s", double_t, 0, "translational stiffness", 200, 0, 2000)
group_translation_s.add("translation_z_s", double_t, 0, "translational stiffness", 200, 0, 2000)

group_rotation_s.add("rotation_x_s", double_t, 0, "rotational stiffness", 20, 0, 300)
group_rotation_s.add("rotation_y_s", double_t, 0, "rotational stiffness", 20, 0, 300)
group_rotation_s.add("rotation_z_s", double_t, 0, "rotational stiffness", 20, 0, 300)

group_nullspace_s.add("nullspace_stiffness", double_t, 0, "nullspace stiffness", 50, 0, 50)
group_apply_s.add("update_stiffness", bool_t, 0, "Update stiffness", False)

#wrench
gen.add("wrench", bool_t, 0, "Artificial Force parameter for Cartesian Impedance Control", True)

group_apply_w = gen.add_group("Apply the Cartesian wrench", type="hidden")
group_wrench_w = gen.add_group("Cartesian Wrench in End effector Frame", type="hidden")
group_wrench_w.add("f_x", double_t, 0, "Apply a force in the x-direction", 0, -30, 30)
group_wrench_w.add("f_y", double_t, 0, "Apply a force in the y-direction", 0, -30, 30)
group_wrench_w.add("f_z", double_t, 0, "Apply a force in the z-direction", 0, -30, 30)
group_wrench_w.add("tau_x", double_t, 0, "Apply a torque  around the x direction", 0, -10, 10)
group_wrench_w.add("tau_y", double_t, 0, "Apply a torque  around the y direction", 0, -10, 10)
group_wrench_w.add("tau_z", double_t, 0, "Apply a torque  around the z direction", 0, -10, 10)

group_apply_w.add("apply_wrench", bool_t, 0, "Apply Cartesian Wrench", False)

#damping
gen.add("damping_factors", bool_t, 0, "Damping parameter for Cartesian Impedance Control", True)

group_translation_d = gen.add_group("Set translational damping factors", type="hidden")
group_rotation_d = gen.add_group("Set rotational damping factors", type="hidden")
group_nullspace_d = gen.add_group("Set nullspace damping factor", type="hidden")
group_apply_d = gen.add_group("Update the damping factors", type="hidden")
group_translation_d.add("translation_x_d", double_t, 0, "translational damping", 1, 0, 1)
group_translation_d.add("translation_y_d", double_t, 0, "translational damping", 1, 0, 1)
group_translation_d.add("translation_z_d", double_t, 0, "translational damping", 1, 0, 1)

group_rotation_d.add("rotation_x_d", double_t, 0, "rotational damping", 1, 0, 1)
group_rotation_d.add("rotation_y_d", double_t, 0, "rotational damping", 1, 0, 1)
group_rotation_d.add("rotation_z_d", double_t, 0, "rotational damping", 1, 0, 1)

group_nullspace_d.add("nullspace_damping", double_t, 0, "nullspace damping", 1, 0, 1)
group_apply_d.add("update_damping_factors", bool_t, 0, "Update damping factors", False)


exit(gen.generate('baxter_interface', '', 'CartesianImpedanceJointTrajectoryActionServer'))
